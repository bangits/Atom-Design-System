@mixin generate-filter-styles {
  .FiltersBase {
    background-color: getFilterColors(filter-base-background-color);
    box-shadow: getFilterSizes(filter-base-box-shadow) getFilterColors(filter-base-box-shadow);
    width: 100%;
    box-sizing: border-box;

    .FiltersContainer {
      @include flex(flex-start, null, $flex-wrap: wrap);
      box-sizing: border-box;
      width: 100%;
      margin: getFilterSizes(filter-base-container-margin);
      padding-top: getFilterSizes(filter-base-container-padding-top);

      .FilterContainer {
        width: getFilterSizes(filter-container-width);
        margin: getFilterSizes(filter-container-margin);

        &.FilterContainerFromTo {
          width: getFilterSizes(filter-container-from-to-width);
          position: relative;
          @include flex();
        }

        &:empty {
          display: none;
        }
      }
    }

    .ArrowIconContainer {
      transform: rotate(180deg);
    }

    &--closed {
      height: getFilterSizes(filter-base-closed-height);

      .FiltersContainer {
        display: none;
      }

      .Checkbox {
        display: none;
      }

      .ArrowIconContainer {
        transform: rotate(0);
      }
    }

    .ControlContainer {
      @include flex(space-between, center);
      padding: getFilterSizes(filter-container-from-to-padding);

      .FilterLabel {
        font-weight: getFilterSizes(filter-label-font-weight);
        color: getFilterColors(filter-label-color);
        letter-spacing: getFilterSizes(filter-label-letter-spacing);
        margin-right: getFilterSizes(filter-label-font-size);
      }
      .ToggleContainer {
        @include flex(null, center);
        .ButtonToogle {
          width: getFilterSizes(button-toogle-width);
        }

        .ClearLabelActive {
          color: getFilterColors(clear-label-active-color);
          margin-right: getFilterSizes(clear-label-active-margin-right);
          cursor: pointer;
        }
        .ClearLabel {
          color: getFilterColors(clear-label-active-color);
          opacity: getFilterSizes(clear-label-opacity);
          margin-right: getFilterSizes(clear-label-active-margin-right);
          cursor: default;
        }
        .UserFoundLabel {
          color: getFilterColors(user-found-label-color);
          letter-spacing: getFilterSizes(user-found-label-letter-spacing);
          margin-right: getFilterSizes(user-found-label-margin-right);
        }
        .ArrowIconContainer {
          width: getFilterSizes(arrow-icon-container-sizes);
          height: getFilterSizes(arrow-icon-container-sizes);
          margin-right: getFilterSizes(arrow-icon-container-margin-right);
          transition: transform getFilterSizes(arrow-icon-container-animation);
          cursor: pointer;
        }
      }
    }
  }

  .Checkbox {
    @include flex(null, null, $flex-wrap: wrap);
    margin: getFilterSizes(checkbox-margin);

    &:empty {
      display: none;
    }
  }
  .DividerCheckbox {
    width: getFilterSizes(divider-checkbox-width);
    margin: auto;
    border: solid getFilterSizes(divider-checkbox-border) getFilterColors(divider-checkbox-color);
    background-color: getFilterColors(divider-checkbox-color);
    margin-top: getFilterSizes(divider-checkbox-margin-top);
  }
}
