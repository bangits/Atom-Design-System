System.register(["react/jsx-runtime", "@/components", "@/icons", "@my-ui/core", "classnames", "./GameDetails.module.scss"], function (exports_1, context_1) {
    "use strict";
    var jsx_runtime_1, components_1, icons_1, core_1, classnames_1, GameDetails_module_scss_1, GameCompatibility;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (jsx_runtime_1_1) {
                jsx_runtime_1 = jsx_runtime_1_1;
            },
            function (components_1_1) {
                components_1 = components_1_1;
            },
            function (icons_1_1) {
                icons_1 = icons_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (classnames_1_1) {
                classnames_1 = classnames_1_1;
            },
            function (GameDetails_module_scss_1_1) {
                GameDetails_module_scss_1 = GameDetails_module_scss_1_1;
            }
        ],
        execute: function () {
            GameCompatibility = ({ uiLanguages, certifiedCountries, currencies, operatingLanguages, restrictedCountries, supportedBrowsers, translations, devices, mobilePortrait, mobileLandscape, desktopPortrait, desktopLandscape }) => {
                return (_jsx(_Fragment, { children: _jsxs("div", { className: classnames_1.default(GameDetails_module_scss_1.default['Card__Inner'], GameDetails_module_scss_1.default['Card__Inner--Lvl-2'], 'Card__Inner', 'Card__Inner--Lvl-2'), children: [_jsxs("div", { className: classnames_1.default(GameDetails_module_scss_1.default['FlexList'], 'FlexList'), children: [_jsxs("div", { className: classnames_1.default(GameDetails_module_scss_1.default['FlexList__Item'], 'FlexList__Item'), children: [_jsx("div", { className: classnames_1.default(GameDetails_module_scss_1.default['CardSubtitle'], 'CardSubtitle'), children: translations.devices }), _jsx("div", { className: classnames_1.default(GameDetails_module_scss_1.default['TagsCell'], 'TagsCell'), children: devices.length === 0 ? (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })) : (devices?.map((id) => id === 1 ? (_jsx(_Fragment, { children: _jsxs("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag'], 'Device-Tag'), children: [_jsx(icons_1.MobileIcon, { width: '1rem' }), _jsx("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag-Label'], 'Device-Tag-Label'), children: translations.mobile })] }, id) })) : id === 2 ? (_jsx(_Fragment, { children: _jsxs("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag'], 'Device-Tag'), children: [_jsx(icons_1.TabletIcon, { width: '2rem' }), _jsx("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag-Label'], 'Device-Tag-Label'), children: translations.tablet })] }, id) })) : id === 3 ? (_jsx(_Fragment, { children: _jsxs("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag'], 'Device-Tag'), children: [_jsx(icons_1.DesktopIcon, { width: '2.2rem' }), _jsx("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag-Label'], 'Device-Tag-Label'), children: translations.desktop })] }, id) })) : (_jsx(_Fragment, {})))) })] }), _jsxs("div", { className: classnames_1.default(GameDetails_module_scss_1.default['FlexList__Item'], 'FlexList__Item'), children: [_jsx("div", { className: classnames_1.default(GameDetails_module_scss_1.default['CardSubtitle'], 'CardSubtitle'), children: translations.mobileScreenMode }), _jsxs("div", { className: classnames_1.default(GameDetails_module_scss_1.default['TagsCell'], 'TagsCell'), children: [mobilePortrait ? (_jsxs("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag'], 'Device-Tag'), children: [_jsx(icons_1.MobileIcon, { width: '1rem' }), _jsx("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag-Label'], 'Device-Tag-Label'), children: translations.portrait })] })) : (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })), mobileLandscape ? (_jsxs("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag'], 'Device-Tag'), children: [_jsx(icons_1.TabletIcon, { width: '2rem' }), _jsx("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag-Label'], 'Device-Tag-Label'), children: translations.landscape })] })) : (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: _jsx(_Fragment, {}) }))] })] }), _jsxs("div", { className: classnames_1.default(GameDetails_module_scss_1.default['FlexList__Item'], 'FlexList__Item'), children: [_jsx("div", { className: classnames_1.default(GameDetails_module_scss_1.default['CardSubtitle'], 'CardSubtitle'), children: translations.tableScreenMode }), _jsxs("div", { className: classnames_1.default(GameDetails_module_scss_1.default['TagsCell'], 'TagsCell'), children: [desktopPortrait ? (_jsxs("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag'], 'Device-Tag'), children: [_jsx(icons_1.MobileIcon, { width: '1rem' }), _jsx("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag-Label'], 'Device-Tag-Label'), children: translations.portrait })] })) : (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })), desktopLandscape ? (_jsxs("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag'], 'Device-Tag'), children: [_jsx(icons_1.TabletIcon, { width: '2rem' }), _jsx("span", { className: classnames_1.default(GameDetails_module_scss_1.default['Device-Tag-Label'], 'Device-Tag-Label'), children: translations.landscape })] })) : (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: _jsx(_Fragment, {}) }))] })] })] }), _jsx(components_1.LabelGroup, { title: translations.uiLanguages, children: uiLanguages.length === 0 ? (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })) : (_jsx(components_1.LanguagesGroup, { tags: uiLanguages })) }), _jsx(components_1.LabelGroup, { title: translations.operatingLanguages, children: operatingLanguages.length === 0 ? (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })) : (_jsx(components_1.LanguagesGroup, { tags: operatingLanguages })) }), _jsx(components_1.LabelGroup, { title: translations.certifiedCountries, children: certifiedCountries.length === 0 ? (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })) : (_jsx(components_1.Countries, { tagCountries: certifiedCountries })) }), _jsx(components_1.LabelGroup, { title: translations.restrictedCountries, children: restrictedCountries.length === 0 ? (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })) : (_jsx(components_1.Countries, { tagCountries: restrictedCountries })) }), _jsx(components_1.LabelGroup, { title: translations.currencies, children: currencies.length === 0 ? (_jsx(core_1.Typography, { variant: 'p4', className: GameDetails_module_scss_1.default['GameDetailsBase--notCompleted'], children: translations.noDataText })) : (_jsx(components_1.CurrencyGroup, { currencies: currencies })) }), _jsx(components_1.LabelGroup, { title: 'Supported Browsers', children: _jsx(components_1.BrowsersCheckboxGroup, { onChange: supportedBrowsers.onChange, browsersEnum: supportedBrowsers.browsersEnum, disabled: supportedBrowsers.disabled, values: supportedBrowsers.initialValues }) })] }) }));
            };
            exports_1("default", GameCompatibility);
        }
    };
});
